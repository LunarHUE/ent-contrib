// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/contrib/entproto/internal/entprototest/ent/autofieldmessage"
	"entgo.io/contrib/entproto/internal/entprototest/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AutoFieldMessageUpdate is the builder for updating AutoFieldMessage entities.
type AutoFieldMessageUpdate struct {
	config
	hooks    []Hook
	mutation *AutoFieldMessageMutation
}

// Where appends a list predicates to the AutoFieldMessageUpdate builder.
func (afmu *AutoFieldMessageUpdate) Where(ps ...predicate.AutoFieldMessage) *AutoFieldMessageUpdate {
	afmu.mutation.Where(ps...)
	return afmu
}

// SetName sets the "name" field.
func (afmu *AutoFieldMessageUpdate) SetName(s string) *AutoFieldMessageUpdate {
	afmu.mutation.SetName(s)
	return afmu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (afmu *AutoFieldMessageUpdate) SetNillableName(s *string) *AutoFieldMessageUpdate {
	if s != nil {
		afmu.SetName(*s)
	}
	return afmu
}

// SetAge sets the "age" field.
func (afmu *AutoFieldMessageUpdate) SetAge(i int32) *AutoFieldMessageUpdate {
	afmu.mutation.ResetAge()
	afmu.mutation.SetAge(i)
	return afmu
}

// SetNillableAge sets the "age" field if the given value is not nil.
func (afmu *AutoFieldMessageUpdate) SetNillableAge(i *int32) *AutoFieldMessageUpdate {
	if i != nil {
		afmu.SetAge(*i)
	}
	return afmu
}

// AddAge adds i to the "age" field.
func (afmu *AutoFieldMessageUpdate) AddAge(i int32) *AutoFieldMessageUpdate {
	afmu.mutation.AddAge(i)
	return afmu
}

// Mutation returns the AutoFieldMessageMutation object of the builder.
func (afmu *AutoFieldMessageUpdate) Mutation() *AutoFieldMessageMutation {
	return afmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (afmu *AutoFieldMessageUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, afmu.sqlSave, afmu.mutation, afmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (afmu *AutoFieldMessageUpdate) SaveX(ctx context.Context) int {
	affected, err := afmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (afmu *AutoFieldMessageUpdate) Exec(ctx context.Context) error {
	_, err := afmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (afmu *AutoFieldMessageUpdate) ExecX(ctx context.Context) {
	if err := afmu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (afmu *AutoFieldMessageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(autofieldmessage.Table, autofieldmessage.Columns, sqlgraph.NewFieldSpec(autofieldmessage.FieldID, field.TypeInt))
	if ps := afmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := afmu.mutation.Name(); ok {
		_spec.SetField(autofieldmessage.FieldName, field.TypeString, value)
	}
	if value, ok := afmu.mutation.Age(); ok {
		_spec.SetField(autofieldmessage.FieldAge, field.TypeInt32, value)
	}
	if value, ok := afmu.mutation.AddedAge(); ok {
		_spec.AddField(autofieldmessage.FieldAge, field.TypeInt32, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, afmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{autofieldmessage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	afmu.mutation.done = true
	return n, nil
}

// AutoFieldMessageUpdateOne is the builder for updating a single AutoFieldMessage entity.
type AutoFieldMessageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AutoFieldMessageMutation
}

// SetName sets the "name" field.
func (afmuo *AutoFieldMessageUpdateOne) SetName(s string) *AutoFieldMessageUpdateOne {
	afmuo.mutation.SetName(s)
	return afmuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (afmuo *AutoFieldMessageUpdateOne) SetNillableName(s *string) *AutoFieldMessageUpdateOne {
	if s != nil {
		afmuo.SetName(*s)
	}
	return afmuo
}

// SetAge sets the "age" field.
func (afmuo *AutoFieldMessageUpdateOne) SetAge(i int32) *AutoFieldMessageUpdateOne {
	afmuo.mutation.ResetAge()
	afmuo.mutation.SetAge(i)
	return afmuo
}

// SetNillableAge sets the "age" field if the given value is not nil.
func (afmuo *AutoFieldMessageUpdateOne) SetNillableAge(i *int32) *AutoFieldMessageUpdateOne {
	if i != nil {
		afmuo.SetAge(*i)
	}
	return afmuo
}

// AddAge adds i to the "age" field.
func (afmuo *AutoFieldMessageUpdateOne) AddAge(i int32) *AutoFieldMessageUpdateOne {
	afmuo.mutation.AddAge(i)
	return afmuo
}

// Mutation returns the AutoFieldMessageMutation object of the builder.
func (afmuo *AutoFieldMessageUpdateOne) Mutation() *AutoFieldMessageMutation {
	return afmuo.mutation
}

// Where appends a list predicates to the AutoFieldMessageUpdate builder.
func (afmuo *AutoFieldMessageUpdateOne) Where(ps ...predicate.AutoFieldMessage) *AutoFieldMessageUpdateOne {
	afmuo.mutation.Where(ps...)
	return afmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (afmuo *AutoFieldMessageUpdateOne) Select(field string, fields ...string) *AutoFieldMessageUpdateOne {
	afmuo.fields = append([]string{field}, fields...)
	return afmuo
}

// Save executes the query and returns the updated AutoFieldMessage entity.
func (afmuo *AutoFieldMessageUpdateOne) Save(ctx context.Context) (*AutoFieldMessage, error) {
	return withHooks(ctx, afmuo.sqlSave, afmuo.mutation, afmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (afmuo *AutoFieldMessageUpdateOne) SaveX(ctx context.Context) *AutoFieldMessage {
	node, err := afmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (afmuo *AutoFieldMessageUpdateOne) Exec(ctx context.Context) error {
	_, err := afmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (afmuo *AutoFieldMessageUpdateOne) ExecX(ctx context.Context) {
	if err := afmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (afmuo *AutoFieldMessageUpdateOne) sqlSave(ctx context.Context) (_node *AutoFieldMessage, err error) {
	_spec := sqlgraph.NewUpdateSpec(autofieldmessage.Table, autofieldmessage.Columns, sqlgraph.NewFieldSpec(autofieldmessage.FieldID, field.TypeInt))
	id, ok := afmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AutoFieldMessage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := afmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, autofieldmessage.FieldID)
		for _, f := range fields {
			if !autofieldmessage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != autofieldmessage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := afmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := afmuo.mutation.Name(); ok {
		_spec.SetField(autofieldmessage.FieldName, field.TypeString, value)
	}
	if value, ok := afmuo.mutation.Age(); ok {
		_spec.SetField(autofieldmessage.FieldAge, field.TypeInt32, value)
	}
	if value, ok := afmuo.mutation.AddedAge(); ok {
		_spec.AddField(autofieldmessage.FieldAge, field.TypeInt32, value)
	}
	_node = &AutoFieldMessage{config: afmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, afmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{autofieldmessage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	afmuo.mutation.done = true
	return _node, nil
}
