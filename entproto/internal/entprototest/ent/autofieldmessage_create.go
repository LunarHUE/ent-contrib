// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/contrib/entproto/internal/entprototest/ent/autofieldmessage"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AutoFieldMessageCreate is the builder for creating a AutoFieldMessage entity.
type AutoFieldMessageCreate struct {
	config
	mutation *AutoFieldMessageMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (afmc *AutoFieldMessageCreate) SetName(s string) *AutoFieldMessageCreate {
	afmc.mutation.SetName(s)
	return afmc
}

// SetAge sets the "age" field.
func (afmc *AutoFieldMessageCreate) SetAge(i int32) *AutoFieldMessageCreate {
	afmc.mutation.SetAge(i)
	return afmc
}

// Mutation returns the AutoFieldMessageMutation object of the builder.
func (afmc *AutoFieldMessageCreate) Mutation() *AutoFieldMessageMutation {
	return afmc.mutation
}

// Save creates the AutoFieldMessage in the database.
func (afmc *AutoFieldMessageCreate) Save(ctx context.Context) (*AutoFieldMessage, error) {
	return withHooks(ctx, afmc.sqlSave, afmc.mutation, afmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (afmc *AutoFieldMessageCreate) SaveX(ctx context.Context) *AutoFieldMessage {
	v, err := afmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (afmc *AutoFieldMessageCreate) Exec(ctx context.Context) error {
	_, err := afmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (afmc *AutoFieldMessageCreate) ExecX(ctx context.Context) {
	if err := afmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (afmc *AutoFieldMessageCreate) check() error {
	if _, ok := afmc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "AutoFieldMessage.name"`)}
	}
	if _, ok := afmc.mutation.Age(); !ok {
		return &ValidationError{Name: "age", err: errors.New(`ent: missing required field "AutoFieldMessage.age"`)}
	}
	return nil
}

func (afmc *AutoFieldMessageCreate) sqlSave(ctx context.Context) (*AutoFieldMessage, error) {
	if err := afmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := afmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, afmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	afmc.mutation.id = &_node.ID
	afmc.mutation.done = true
	return _node, nil
}

func (afmc *AutoFieldMessageCreate) createSpec() (*AutoFieldMessage, *sqlgraph.CreateSpec) {
	var (
		_node = &AutoFieldMessage{config: afmc.config}
		_spec = sqlgraph.NewCreateSpec(autofieldmessage.Table, sqlgraph.NewFieldSpec(autofieldmessage.FieldID, field.TypeInt))
	)
	if value, ok := afmc.mutation.Name(); ok {
		_spec.SetField(autofieldmessage.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := afmc.mutation.Age(); ok {
		_spec.SetField(autofieldmessage.FieldAge, field.TypeInt32, value)
		_node.Age = value
	}
	return _node, _spec
}

// AutoFieldMessageCreateBulk is the builder for creating many AutoFieldMessage entities in bulk.
type AutoFieldMessageCreateBulk struct {
	config
	err      error
	builders []*AutoFieldMessageCreate
}

// Save creates the AutoFieldMessage entities in the database.
func (afmcb *AutoFieldMessageCreateBulk) Save(ctx context.Context) ([]*AutoFieldMessage, error) {
	if afmcb.err != nil {
		return nil, afmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(afmcb.builders))
	nodes := make([]*AutoFieldMessage, len(afmcb.builders))
	mutators := make([]Mutator, len(afmcb.builders))
	for i := range afmcb.builders {
		func(i int, root context.Context) {
			builder := afmcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AutoFieldMessageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, afmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, afmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, afmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (afmcb *AutoFieldMessageCreateBulk) SaveX(ctx context.Context) []*AutoFieldMessage {
	v, err := afmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (afmcb *AutoFieldMessageCreateBulk) Exec(ctx context.Context) error {
	_, err := afmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (afmcb *AutoFieldMessageCreateBulk) ExecX(ctx context.Context) {
	if err := afmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
