// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/contrib/entproto/internal/entprototest/ent/autofieldmessage"
	"entgo.io/contrib/entproto/internal/entprototest/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AutoFieldMessageDelete is the builder for deleting a AutoFieldMessage entity.
type AutoFieldMessageDelete struct {
	config
	hooks    []Hook
	mutation *AutoFieldMessageMutation
}

// Where appends a list predicates to the AutoFieldMessageDelete builder.
func (afmd *AutoFieldMessageDelete) Where(ps ...predicate.AutoFieldMessage) *AutoFieldMessageDelete {
	afmd.mutation.Where(ps...)
	return afmd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (afmd *AutoFieldMessageDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, afmd.sqlExec, afmd.mutation, afmd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (afmd *AutoFieldMessageDelete) ExecX(ctx context.Context) int {
	n, err := afmd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (afmd *AutoFieldMessageDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(autofieldmessage.Table, sqlgraph.NewFieldSpec(autofieldmessage.FieldID, field.TypeInt))
	if ps := afmd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, afmd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	afmd.mutation.done = true
	return affected, err
}

// AutoFieldMessageDeleteOne is the builder for deleting a single AutoFieldMessage entity.
type AutoFieldMessageDeleteOne struct {
	afmd *AutoFieldMessageDelete
}

// Where appends a list predicates to the AutoFieldMessageDelete builder.
func (afmdo *AutoFieldMessageDeleteOne) Where(ps ...predicate.AutoFieldMessage) *AutoFieldMessageDeleteOne {
	afmdo.afmd.mutation.Where(ps...)
	return afmdo
}

// Exec executes the deletion query.
func (afmdo *AutoFieldMessageDeleteOne) Exec(ctx context.Context) error {
	n, err := afmdo.afmd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{autofieldmessage.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (afmdo *AutoFieldMessageDeleteOne) ExecX(ctx context.Context) {
	if err := afmdo.Exec(ctx); err != nil {
		panic(err)
	}
}
